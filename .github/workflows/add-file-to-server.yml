name: Add File to Server

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: 'Path to file in repository (e.g., styles/main.css)'
        required: true
        type: string
      environment:
        description: 'Select the target environment'
        required: true
        type: choice
        default: 'dev'
        options:
          - dev
          - qa
          - prod

jobs:
  upload-file:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set API Base URL
        run: |
          case "${{ github.event.inputs.environment }}" in
            "dev")
              echo "API_BASE_URL=${{ secrets.VERINT_API_URL_DEV }}" >> $GITHUB_ENV
              ;;
            "qa")
              echo "API_BASE_URL=${{ secrets.VERINT_BASE_URL_QA }}" >> $GITHUB_ENV
              ;;
            "prod")
              echo "API_BASE_URL=${{ secrets.VERINT_BASE_URL_PROD }}" >> $GITHUB_ENV
              ;;
          esac
      - name: Extract file properties
        id: file_props
        run: |
          FILE_PATH="${{ github.event.inputs.file_path }}"
          # Get the directory name (the folder) from the path
          FOLDER_NAME=$(dirname "$FILE_PATH")
          # Remove the first part if it's a single dot '.'
          if [ "$FOLDER_NAME" = "." ]; then
            FOLDER_NAME="root"
          fi
          # Get the file extension
          FILE_EXT="${FILE_PATH##*.}"
          
          # Determine the content type based on the file extension
          case "$FILE_EXT" in
            js)
              CONTENT_TYPE="text/javascript"
              ;;
            css)
              CONTENT_TYPE="text/css"
              ;;
            png)
              CONTENT_TYPE="image/png"
              ;;
            svg)
              CONTENT_TYPE="image/svg+xml"
              ;;
            *)
              CONTENT_TYPE="text/plain" # Default to text/plain for unknown types
              ;;
          esac
          
          echo "📁 Extracted Folder: $FOLDER_NAME"
          echo "📄 Extracted Content-Type: $CONTENT_TYPE"
          
          # Set the extracted values as job outputs
          echo "folder_name=$FOLDER_NAME" >> $GITHUB_OUTPUT
          echo "content_type=$CONTENT_TYPE" >> $GITHUB_OUTPUT
      - name: Validate file exists
        run: |
          echo '{"status": "failed", "error": "Unknown error"}' > upload_response.json
          
          FILE_PATH="${{ github.event.inputs.file_path }}"
          if [ ! -f "$FILE_PATH" ]; then
            echo "❌ File not found: $FILE_PATH"
            echo '{"status": "failed", "error": "File not found"}' > upload_response.json
            exit 1
          fi
          
          echo "✅ File found: $FILE_PATH"
          file_size=$(stat -c%s "$FILE_PATH" 2>/dev/null || echo "unknown")
          echo "📁 File size: ${file_size} bytes"
      
      - name: Test Upload Methods
        env:
          API_USERNAME: ${{ secrets.VERINT_USERNAME }}
          API_PASSWORD: ${{ secrets.VERINT_PASSWORD }}
          FILE_PATH: ${{ github.event.inputs.file_path }}
          FOLDER_NAME: ${{ steps.file_props.outputs.folder_name }}
          CONTENT_TYPE: ${{ steps.file_props.outputs.content_type }}
        run: |
          filename=$(basename "$FILE_PATH")
          echo "🚀 Uploading $filename to folder: $FOLDER_NAME"
          
          # Use a single, explicit method for consistency
          # Method 2 is generally more robust for structured data like 'Folder'
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X 'POST' \
            "${API_BASE_URL}/files" \
            -H 'accept: application/json' \
            -u "${API_USERNAME}:${API_PASSWORD}" \
            -H 'Content-Type: multipart/form-data' \
            -F "file=@${FILE_PATH};type=${CONTENT_TYPE}" \
            -F "Folder={\"folderName\":\"${FOLDER_NAME}\"}")
            
          http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo "$response" | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
          
          echo "HTTP Status: $http_code"
          echo "Response: $body"
          
          if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
            folder_in_response=$(echo "$body" | jq -r '.folderName // empty' 2>/dev/null)
            if [ "$folder_in_response" = "$FOLDER_NAME" ]; then
              echo "✅ Upload succeeded with correct folder!"
              echo "$body" > upload_response.json
            else
              echo "❌ Upload succeeded, but folder is wrong: '$folder_in_response' (expected '$FOLDER_NAME')"
              echo '{"status": "failed", "error": "Uploaded to wrong folder"}' > upload_response.json
              exit 1
            fi
          else
            echo "❌ Upload failed. HTTP Status: $http_code"
            echo '{"status": "failed", "error": "Upload failed"}' > upload_response.json
            exit 1
          fi
      - name: Upload response as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: upload-response-${{ github.run_number }}
          path: |
            upload_response.json
            ${{ github.event.inputs.file_path }}
          retention-days: 30
