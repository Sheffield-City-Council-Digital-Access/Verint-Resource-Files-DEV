name: Replace Server File

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: 'Path to file in repository (e.g., scripts/main.js)'
        required: true
        type: string
      content_type:
        description: 'File content type (e.g., text/css, image/svg, image/png)'
        required: false
        default: 'text/plain'
        type: string
      environment:
        description: 'Select the target environment'
        required: true
        type: choice
        default: 'dev'
        options:
          - dev
          - qa
          - prod

jobs:
  update-file:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Get file key and update file
        env:
          API_BASE_URL: ${{ secrets[format('VERINT_BASE_URL_{0}', inputs.environment)] }}
          API_USERNAME: ${{ secrets.VERINT_USERNAME }}
          API_PASSWORD: ${{ secrets.VERINT_PASSWORD }}
          FILE_PATH: ${{ github.event.inputs.file_path }}
          CONTENT_TYPE: ${{ github.event.inputs.content_type }}
        run: |
          # 1. Validate that the local file exists
          FULL_PATH="${FILE_PATH}"
          if [ ! -f "$FULL_PATH" ]; then
            echo "❌ Local file not found: $FULL_PATH"
            exit 1
          fi
          
          # 2. Separate filename and folder from the input path
          # We use dirname to get the path, then basename to get the last folder name
          FOLDER_NAME=$(basename $(dirname "$FULL_PATH"))
          FILENAME=$(basename "$FULL_PATH")

          echo "Attempting to match on API with:"
          echo "  - Filename: '$FILENAME'"
          echo "  - Folder Name: '$FOLDER_NAME'"

          # 3. Call the GET /files API to find the file key
          echo "Making API GET request to find the file..."
          response_get=$(curl -s -u "${API_USERNAME}:${API_PASSWORD}" "${API_BASE_URL}/files?query=${FILENAME}")

          echo "API GET response:"
          echo "$response_get"
          
          # Use jq to find the key for the file matching both the name and folder
          # jq is pre-installed on GitHub-hosted runners
          FILE_KEY=$(echo "$response_get" | jq -r --arg filename "$FILENAME" --arg foldername "$FOLDER_NAME" '.collection[] | select(.fileName == $filename and .folderName == $foldername) | .key')

          if [ -z "$FILE_KEY" ]; then
            echo "❌ File not found on the server with a matching name and folder."
            echo "Please ensure the 'file_path' input matches the folder structure on the API server."
            exit 1
          fi

          echo "✅ Found a match! Using file key: $FILE_KEY"
          
          # 4. Use the retrieved key to perform the PUT request (update)
          echo "🔄 Starting file update..."
          
          response_put=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X 'PUT' \
            "${API_BASE_URL}/files/${FILE_KEY}" \
            -H 'accept: application/json' \
            -u "${API_USERNAME}:${API_PASSWORD}" \
            -H 'Content-Type: multipart/form-data' \
            -F "file=@${FILE_PATH};type=${CONTENT_TYPE}")

          # Extract and check HTTP status code for the PUT request
          http_code=$(echo $response_put | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body_put=$(echo $response_put | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
          
          echo "================== UPDATE RESULT =================="
          echo "HTTP Status Code: $http_code"
          
          if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 204 ]; then
            echo "✅ File update successful!"
            echo "$body_put" > update_response.json
          else
            echo "❌ File update failed!"
            echo "📄 Response: $body_put"
            exit 1
          fi
          echo "================================================="

      - name: Upload response as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: update-response-${{ github.run_number }}
          path: update_response.json
          retention-days: 28
